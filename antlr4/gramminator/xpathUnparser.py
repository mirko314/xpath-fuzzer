# Generated by Grammarinator 18.10

from itertools import chain
from grammarinator.runtime import *

import xpathUnlexer


class xpathUnparser(Grammarinator):

    def __init__(self, unlexer):
        super(xpathUnparser, self).__init__()
        self.unlexer = unlexer
        self.set_options()

    @depthcontrol
    def main(self):
        current = self.create_node(UnparserRule(name='main'))
        current += self.expr()
        return current
    main.min_depth = 7

    @depthcontrol
    def locationPath(self):
        current = self.create_node(UnparserRule(name='locationPath'))
        choice = self.choice([0 if [3, 4][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_111', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_111', choice)] = self.unlexer.weights.get(('alt_111', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.relativeLocationPath()
        elif choice == 1:
            current += self.absoluteLocationPathNoroot()
        return current
    locationPath.min_depth = 3

    @depthcontrol
    def absoluteLocationPathNoroot(self):
        current = self.create_node(UnparserRule(name='absoluteLocationPathNoroot'))
        choice = self.choice([0 if [3, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_114', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_114', choice)] = self.unlexer.weights.get(('alt_114', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='/'))
            current += self.relativeLocationPath()
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='//'))
            current += self.relativeLocationPath()
        return current
    absoluteLocationPathNoroot.min_depth = 3

    @depthcontrol
    def relativeLocationPath(self):
        current = self.create_node(UnparserRule(name='relativeLocationPath'))
        current += self.step()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_more():
                choice = self.choice([0 if [0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_120', i), 1) for i, w in enumerate([1, 1])])
                self.unlexer.weights[('alt_120', choice)] = self.unlexer.weights.get(('alt_120', choice), 1) * self.unlexer.cooldown
                if choice == 0:
                    current += self.create_node(UnlexerRule(src='/'))
                elif choice == 1:
                    current += self.create_node(UnlexerRule(src='//'))
                current += self.step()

        return current
    relativeLocationPath.min_depth = 2

    @depthcontrol
    def step(self):
        current = self.create_node(UnparserRule(name='step'))
        choice = self.choice([0 if [2, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_125', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_125', choice)] = self.unlexer.weights.get(('alt_125', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.axisSpecifier()
            current += self.nodeTest()
            if self.unlexer.max_depth >= 8:
                for _ in self.zero_or_more():
                    current += self.predicate()

        elif choice == 1:
            current += self.abbreviatedStep()
        return current
    step.min_depth = 1

    @depthcontrol
    def axisSpecifier(self):
        current = self.create_node(UnparserRule(name='axisSpecifier'))
        choice = self.choice([0 if [1, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_129', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_129', choice)] = self.unlexer.weights.get(('alt_129', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.AxisName()
            current += self.create_node(UnlexerRule(src='::'))
        elif choice == 1:
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='@'))

        return current
    axisSpecifier.min_depth = 0

    @depthcontrol
    def nodeTest(self):
        current = self.create_node(UnparserRule(name='nodeTest'))
        choice = self.choice([0 if [1, 1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_135', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_135', choice)] = self.unlexer.weights.get(('alt_135', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.nameTest()
        elif choice == 1:
            current += self.unlexer.NodeType()
            current += self.create_node(UnlexerRule(src='('))
            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 2:
            current += self.create_node(UnlexerRule(src='processing-instruction'))
            current += self.create_node(UnlexerRule(src='('))
            current += self.unlexer.Literal()
            current += self.create_node(UnlexerRule(src=')'))
        return current
    nodeTest.min_depth = 1

    @depthcontrol
    def predicate(self):
        current = self.create_node(UnparserRule(name='predicate'))
        current += self.create_node(UnlexerRule(src='['))
        current += self.expr()
        current += self.create_node(UnlexerRule(src=']'))
        return current
    predicate.min_depth = 7

    @depthcontrol
    def abbreviatedStep(self):
        current = self.create_node(UnparserRule(name='abbreviatedStep'))
        choice = self.choice([0 if [0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_146', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_146', choice)] = self.unlexer.weights.get(('alt_146', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='.'))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='..'))
        return current
    abbreviatedStep.min_depth = 0

    @depthcontrol
    def expr(self):
        current = self.create_node(UnparserRule(name='expr'))
        current += self.orExpr()
        return current
    expr.min_depth = 6

    @depthcontrol
    def primaryExpr(self):
        current = self.create_node(UnparserRule(name='primaryExpr'))
        choice = self.choice([0 if [4, 7, 1, 2, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_151', i), 1) for i, w in enumerate([1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_151', choice)] = self.unlexer.weights.get(('alt_151', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.variableReference()
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='('))
            current += self.expr()
            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 2:
            current += self.unlexer.Literal()
        elif choice == 3:
            current += self.unlexer.Number()
        elif choice == 4:
            current += self.functionCall()
        return current
    primaryExpr.min_depth = 1

    @depthcontrol
    def functionCall(self):
        current = self.create_node(UnparserRule(name='functionCall'))
        current += self.functionName()
        current += self.create_node(UnlexerRule(src='('))
        if self.unlexer.max_depth >= 7:
            for _ in self.zero_or_one():
                current += self.expr()
                if self.unlexer.max_depth >= 7:
                    for _ in self.zero_or_more():
                        current += self.create_node(UnlexerRule(src=','))
                        current += self.expr()


        current += self.create_node(UnlexerRule(src=')'))
        return current
    functionCall.min_depth = 2

    @depthcontrol
    def unionExprNoRoot(self):
        current = self.create_node(UnparserRule(name='unionExprNoRoot'))
        choice = self.choice([0 if [4, 5][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_164', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_164', choice)] = self.unlexer.weights.get(('alt_164', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.pathExprNoRoot()
            # if self.unlexer.max_depth >= 5:
            #     for _ in self.zero_or_one():
            #         current += self.create_node(UnlexerRule(src='|'))
            #         current += self.unionExprNoRoot()

        elif choice == 1:
            current += self.create_node(UnlexerRule(src='/'))
            current += self.create_node(UnlexerRule(src='|'))
            current += self.unionExprNoRoot()
        return current
    unionExprNoRoot.min_depth = 4

    @depthcontrol
    def pathExprNoRoot(self):
        current = self.create_node(UnparserRule(name='pathExprNoRoot'))
        choice = self.choice([0 if [4, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_171', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_171', choice)] = self.unlexer.weights.get(('alt_171', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.locationPath()
        elif choice == 1:
            current += self.filterExpr()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    choice = self.choice([0 if [0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_175', i), 1) for i, w in enumerate([1, 1])])
                    self.unlexer.weights[('alt_175', choice)] = self.unlexer.weights.get(('alt_175', choice), 1) * self.unlexer.cooldown
                    if choice == 0:
                        current += self.create_node(UnlexerRule(src='/'))
                    elif choice == 1:
                        current += self.create_node(UnlexerRule(src='//'))
                    current += self.relativeLocationPath()

        return current
    pathExprNoRoot.min_depth = 3

    @depthcontrol
    def filterExpr(self):
        current = self.create_node(UnparserRule(name='filterExpr'))
        current += self.primaryExpr()
        if self.unlexer.max_depth >= 8:
            # for _ in self.zero_or_more():
            current += self.predicate()

        return current
    filterExpr.min_depth = 2

    @depthcontrol
    def orExpr(self):
        current = self.create_node(UnparserRule(name='orExpr'))
        current += self.andExpr()
        # if self.unlexer.max_depth >= 5:
        #     for _ in self.zero_or_more():
        #         current += self.create_node(UnlexerRule(src='or'))
        #         current += self.andExpr()

        return current
    orExpr.min_depth = 5

    @depthcontrol
    def andExpr(self):
        current = self.create_node(UnparserRule(name='andExpr'))
        current += self.equalityExpr()
        # if self.unlexer.max_depth >= 4:
        #     for _ in self.zero_or_more():
        #         current += self.create_node(UnlexerRule(src='and'))
        #         current += self.equalityExpr()

        return current
    andExpr.min_depth = 4

    @depthcontrol
    def equalityExpr(self):
        current = self.create_node(UnparserRule(name='equalityExpr'))
        current += self.relationalExpr()
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_more():
                choice = self.choice([0 if [0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_186', i), 1) for i, w in enumerate([1, 1])])
                self.unlexer.weights[('alt_186', choice)] = self.unlexer.weights.get(('alt_186', choice), 1) * self.unlexer.cooldown
                if choice == 0:
                    current += self.create_node(UnlexerRule(src='='))
                elif choice == 1:
                    current += self.create_node(UnlexerRule(src='!='))
                current += self.relationalExpr()

        return current
    equalityExpr.min_depth = 3

    @depthcontrol
    def relationalExpr(self):
        current = self.create_node(UnparserRule(name='relationalExpr'))
        current += self.additiveExpr()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_more():
                choice = self.choice([0 if [0, 0, 0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_192', i), 1) for i, w in enumerate([1, 1, 1, 1])])
                self.unlexer.weights[('alt_192', choice)] = self.unlexer.weights.get(('alt_192', choice), 1) * self.unlexer.cooldown
                if choice == 0:
                    current += self.create_node(UnlexerRule(src='<'))
                elif choice == 1:
                    current += self.create_node(UnlexerRule(src='>'))
                elif choice == 2:
                    current += self.create_node(UnlexerRule(src='<='))
                elif choice == 3:
                    current += self.create_node(UnlexerRule(src='>='))
                current += self.additiveExpr()

        return current
    relationalExpr.min_depth = 2

    @depthcontrol
    def additiveExpr(self):
        current = self.create_node(UnparserRule(name='additiveExpr'))
        current += self.multiplicativeExpr()
        # if self.unlexer.max_depth >= 1:
        #     for _ in self.zero_or_more():
        #         choice = self.choice([0 if [0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_202', i), 1) for i, w in enumerate([1, 1])])
        #         self.unlexer.weights[('alt_202', choice)] = self.unlexer.weights.get(('alt_202', choice), 1) * self.unlexer.cooldown
        #         if choice == 0:
        #             current += self.create_node(UnlexerRule(src='+'))
        #         elif choice == 1:
        #             current += self.create_node(UnlexerRule(src='-'))
        #         current += self.multiplicativeExpr()

        return current
    additiveExpr.min_depth = 1

    @depthcontrol
    def multiplicativeExpr(self):
        current = self.create_node(UnparserRule(name='multiplicativeExpr'))
        choice = self.choice([0 if [6, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_207', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_207', choice)] = self.unlexer.weights.get(('alt_207', choice), 1) * self.unlexer.cooldown
        # print(self.unlexer.weights)
        # if choice == 0:
        current += self.unaryExprNoRoot()
            # if self.unlexer.max_depth >= 1:
                # for _ in self.zero_or_one():
                #     choice = self.choice([0 if [0, 0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_211', i), 1) for i, w in enumerate([1, 1, 1])])
                #     self.unlexer.weights[('alt_211', choice)] = self.unlexer.weights.get(('alt_211', choice), 1) * self.unlexer.cooldown
                #     if choice == 0:
                #         current += self.create_node(UnlexerRule(src='*'))
                #     elif choice == 1:
                #         current += self.create_node(UnlexerRule(src='div'))
                #     elif choice == 2:
                #         current += self.create_node(UnlexerRule(src='mod'))
                #     current += self.multiplicativeExpr()
                #     print("choice == 0:" + str(choice))

        # elif choice == 1:
        #     current += self.create_node(UnlexerRule(src='/'))
        #     if self.unlexer.max_depth >= 1:
        #         for _ in self.zero_or_one():
        #             choice = self.choice([0 if [0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_220', i), 1) for i, w in enumerate([1, 1])])
        #             self.unlexer.weights[('alt_220', choice)] = self.unlexer.weights.get(('alt_220', choice), 1) * self.unlexer.cooldown
        #             if choice == 0:
        #                 current += self.create_node(UnlexerRule(src='div'))
        #             elif choice == 1:
        #                 current += self.create_node(UnlexerRule(src='mod'))
        #             current += self.multiplicativeExpr()
        #             print("choice == 1:" + str(choice))

        return current
    multiplicativeExpr.min_depth = 0

    @depthcontrol
    def unaryExprNoRoot(self):
        current = self.create_node(UnparserRule(name='unaryExprNoRoot'))
        # if self.unlexer.max_depth >= 0:
        #     for _ in self.zero_or_more():
        #         current += self.create_node(UnlexerRule(src='-'))

        current += self.unionExprNoRoot()
        return current
    unaryExprNoRoot.min_depth = 5

    @depthcontrol
    def qName(self):
        current = self.create_node(UnparserRule(name='qName'))
        current += self.nCName()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.create_node(UnlexerRule(src=':'))
                current += self.nCName()

        return current
    qName.min_depth = 2

    @depthcontrol
    def functionName(self):
        current = self.create_node(UnparserRule(name='functionName'))
        choice = self.choice([0 if [2, 2, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_229', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_229', choice)] = self.unlexer.weights.get(('alt_229', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.nCName()
            current += self.create_node(UnlexerRule(src=':'))
            current += self.nCName()
        elif choice == 1:
            current += self.unlexer.NCName()
        elif choice == 2:
            current += self.unlexer.AxisName()
        return current
    functionName.min_depth = 1

    @depthcontrol
    def variableReference(self):
        current = self.create_node(UnparserRule(name='variableReference'))
        current += self.create_node(UnlexerRule(src='$'))
        current += self.qName()
        return current
    variableReference.min_depth = 3

    @depthcontrol
    def nameTest(self):
        current = self.create_node(UnparserRule(name='nameTest'))
        choice = self.choice([0 if [0, 2, 3][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_235', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_235', choice)] = self.unlexer.weights.get(('alt_235', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='*'))
        elif choice == 1:
            current += self.nCName()
            current += self.create_node(UnlexerRule(src=':'))
            current += self.create_node(UnlexerRule(src='*'))
        elif choice == 2:
            current += self.qName()
        return current
    nameTest.min_depth = 0

    @depthcontrol
    def nCName(self):
        current = self.create_node(UnparserRule(name='nCName'))
        choice = self.choice([0 if [2, 1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_242', i), 1) for i, w in enumerate([1, 1, 1])])
        self.unlexer.weights[('alt_242', choice)] = self.unlexer.weights.get(('alt_242', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.NCName()
        elif choice == 1:
            current += self.unlexer.AxisName()
        elif choice == 2:
            current += self.unlexer.NodeType()
        return current
    nCName.min_depth = 1

    default_rule = main

