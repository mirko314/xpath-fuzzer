# Generated by Grammarinator 18.10

from itertools import chain
from grammarinator.runtime import *

charset_0 = list(chain(*multirange_diff(printable_ascii_ranges, [(34, 35)])))
charset_1 = list(chain(*multirange_diff(printable_ascii_ranges, [(92, 93)])))


class xpathUnlexer(Grammarinator):

    def __init__(self, *, max_depth=float('inf'), weights=None, cooldown=1.0):
        super(xpathUnlexer, self).__init__()
        self.unlexer = self
        self.max_depth = max_depth
        self.weights = weights or dict()
        self.cooldown = cooldown
        self.set_options()

    def EOF(self, *args, **kwargs):
        pass

    @depthcontrol
    def NodeType(self):
        current = self.create_node(UnlexerRule(name='NodeType'))
        choice = self.choice([0 if [0, 0, 0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_0', i), 1) for i, w in enumerate([1, 1, 1, 1])])
        self.unlexer.weights[('alt_0', choice)] = self.unlexer.weights.get(('alt_0', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='comment'))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='text'))
        elif choice == 2:
            current += self.create_node(UnlexerRule(src='processing-instruction'))
        elif choice == 3:
            current += self.create_node(UnlexerRule(src='node'))
        return current
    NodeType.min_depth = 0

    @depthcontrol
    def Number(self):
        current = self.create_node(UnlexerRule(name='Number'))
        choice = self.choice([0 if [1, 1][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_9', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_9', choice)] = self.unlexer.weights.get(('alt_9', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.Digits()
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src='.'))
                    if self.unlexer.max_depth >= 1:
                        for _ in self.zero_or_one():
                            current += self.unlexer.Digits()


        elif choice == 1:
            current += self.create_node(UnlexerRule(src='.'))
            current += self.unlexer.Digits()
        return current
    Number.min_depth = 1

    @depthcontrol
    def Digits(self):
        current = self.create_node(UnlexerRule(name='Digits'))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.create_node(UnlexerRule(src=self.char_from_list(range(48, 58))))

        return current
    Digits.min_depth = 0

    @depthcontrol
    def AxisName(self):
        current = self.create_node(UnlexerRule(name='AxisName'))
        choice = self.choice([0 if [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_16', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_16', choice)] = self.unlexer.weights.get(('alt_16', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='ancestor'))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='ancestor-or-self'))
        elif choice == 2:
            current += self.create_node(UnlexerRule(src='attribute'))
        elif choice == 3:
            current += self.create_node(UnlexerRule(src='child'))
        elif choice == 4:
            current += self.create_node(UnlexerRule(src='descendant'))
        elif choice == 5:
            current += self.create_node(UnlexerRule(src='descendant-or-self'))
        elif choice == 6:
            current += self.create_node(UnlexerRule(src='following'))
        elif choice == 7:
            current += self.create_node(UnlexerRule(src='following-sibling'))
        elif choice == 8:
            current += self.create_node(UnlexerRule(src='namespace'))
        elif choice == 9:
            current += self.create_node(UnlexerRule(src='parent'))
        elif choice == 10:
            current += self.create_node(UnlexerRule(src='preceding'))
        elif choice == 11:
            current += self.create_node(UnlexerRule(src='preceding-sibling'))
        elif choice == 12:
            current += self.create_node(UnlexerRule(src='self'))
        return current
    AxisName.min_depth = 0

    @depthcontrol
    def PATHSEP(self):
        current = self.create_node(UnlexerRule(name='PATHSEP'))
        current += self.create_node(UnlexerRule(src='/'))
        return current
    PATHSEP.min_depth = 0

    @depthcontrol
    def ABRPATH(self):
        current = self.create_node(UnlexerRule(name='ABRPATH'))
        current += self.create_node(UnlexerRule(src='//'))
        return current
    ABRPATH.min_depth = 0

    @depthcontrol
    def LPAR(self):
        current = self.create_node(UnlexerRule(name='LPAR'))
        current += self.create_node(UnlexerRule(src='('))
        return current
    LPAR.min_depth = 0

    @depthcontrol
    def RPAR(self):
        current = self.create_node(UnlexerRule(name='RPAR'))
        current += self.create_node(UnlexerRule(src=')'))
        return current
    RPAR.min_depth = 0

    @depthcontrol
    def LBRAC(self):
        current = self.create_node(UnlexerRule(name='LBRAC'))
        current += self.create_node(UnlexerRule(src='['))
        return current
    LBRAC.min_depth = 0

    @depthcontrol
    def RBRAC(self):
        current = self.create_node(UnlexerRule(name='RBRAC'))
        current += self.create_node(UnlexerRule(src=']'))
        return current
    RBRAC.min_depth = 0

    @depthcontrol
    def MINUS(self):
        current = self.create_node(UnlexerRule(name='MINUS'))
        current += self.create_node(UnlexerRule(src='-'))
        return current
    MINUS.min_depth = 0

    @depthcontrol
    def PLUS(self):
        current = self.create_node(UnlexerRule(name='PLUS'))
        current += self.create_node(UnlexerRule(src='+'))
        return current
    PLUS.min_depth = 0

    @depthcontrol
    def DOT(self):
        current = self.create_node(UnlexerRule(name='DOT'))
        current += self.create_node(UnlexerRule(src='.'))
        return current
    DOT.min_depth = 0

    @depthcontrol
    def MUL(self):
        current = self.create_node(UnlexerRule(name='MUL'))
        current += self.create_node(UnlexerRule(src='*'))
        return current
    MUL.min_depth = 0

    @depthcontrol
    def DOTDOT(self):
        current = self.create_node(UnlexerRule(name='DOTDOT'))
        current += self.create_node(UnlexerRule(src='..'))
        return current
    DOTDOT.min_depth = 0

    @depthcontrol
    def AT(self):
        current = self.create_node(UnlexerRule(name='AT'))
        current += self.create_node(UnlexerRule(src='@'))
        return current
    AT.min_depth = 0

    @depthcontrol
    def COMMA(self):
        current = self.create_node(UnlexerRule(name='COMMA'))
        current += self.create_node(UnlexerRule(src=','))
        return current
    COMMA.min_depth = 0

    @depthcontrol
    def PIPE(self):
        current = self.create_node(UnlexerRule(name='PIPE'))
        current += self.create_node(UnlexerRule(src='|'))
        return current
    PIPE.min_depth = 0

    @depthcontrol
    def LESS(self):
        current = self.create_node(UnlexerRule(name='LESS'))
        current += self.create_node(UnlexerRule(src='<'))
        return current
    LESS.min_depth = 0

    @depthcontrol
    def MORE_(self):
        current = self.create_node(UnlexerRule(name='MORE_'))
        current += self.create_node(UnlexerRule(src='>'))
        return current
    MORE_.min_depth = 0

    @depthcontrol
    def LE(self):
        current = self.create_node(UnlexerRule(name='LE'))
        current += self.create_node(UnlexerRule(src='<='))
        return current
    LE.min_depth = 0

    @depthcontrol
    def GE(self):
        current = self.create_node(UnlexerRule(name='GE'))
        current += self.create_node(UnlexerRule(src='>='))
        return current
    GE.min_depth = 0

    @depthcontrol
    def COLON(self):
        current = self.create_node(UnlexerRule(name='COLON'))
        current += self.create_node(UnlexerRule(src=':'))
        return current
    COLON.min_depth = 0

    @depthcontrol
    def CC(self):
        current = self.create_node(UnlexerRule(name='CC'))
        current += self.create_node(UnlexerRule(src='::'))
        return current
    CC.min_depth = 0

    @depthcontrol
    def APOS(self):
        current = self.create_node(UnlexerRule(name='APOS'))
        current += self.create_node(UnlexerRule(src='\''))
        return current
    APOS.min_depth = 0

    @depthcontrol
    def QUOT(self):
        current = self.create_node(UnlexerRule(name='QUOT'))
        current += self.create_node(UnlexerRule(src='"'))
        return current
    QUOT.min_depth = 0

    @depthcontrol
    def Literal(self):
        current = self.create_node(UnlexerRule(name='Literal'))
        choice = self.choice([0 if [0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_65', i), 1) for i, w in enumerate([1, 1])])
        self.unlexer.weights[('alt_65', choice)] = self.unlexer.weights.get(('alt_65', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src='"'))
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_more():
                    current += UnlexerRule(src=self.char_from_list(charset_0))

            current += self.create_node(UnlexerRule(src='"'))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='\''))
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_more():
                    current += UnlexerRule(src=self.char_from_list(charset_1))

            current += self.create_node(UnlexerRule(src='\''))
        return current
    Literal.min_depth = 0

    @depthcontrol
    def Whitespace(self):
        current = self.create_node(UnlexerRule(name='Whitespace'))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                choice = self.choice([0 if [0, 0, 0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_74', i), 1) for i, w in enumerate([1, 1, 1, 1])])
                self.unlexer.weights[('alt_74', choice)] = self.unlexer.weights.get(('alt_74', choice), 1) * self.unlexer.cooldown
                if choice == 0:
                    current += self.create_node(UnlexerRule(src=' '))
                elif choice == 1:
                    current += self.create_node(UnlexerRule(src='\t'))
                elif choice == 2:
                    current += self.create_node(UnlexerRule(src='\n'))
                elif choice == 3:
                    current += self.create_node(UnlexerRule(src='\r'))

        return current
    Whitespace.min_depth = 0

    @depthcontrol
    def NCName(self):
        current = self.create_node(UnlexerRule(name='NCName'))
        current += self.unlexer.NCNameStartChar()
        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_more():
                current += self.unlexer.NCNameChar()

        return current
    NCName.min_depth = 1

    @depthcontrol
    def NCNameStartChar(self):
        current = self.create_node(UnlexerRule(name='NCNameStartChar'))
        choice = self.choice([0 if [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_84', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_84', choice)] = self.unlexer.weights.get(('alt_84', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.create_node(UnlexerRule(src=self.char_from_list(range(65, 91))))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='_'))
        elif choice == 2:
            current += self.create_node(UnlexerRule(src=self.char_from_list(range(97, 123))))
        elif choice == 3:
            current += self.create_node(UnlexerRule(src=self.char_from_list(range(192, 214))))
        elif choice == 4:
            current += self.create_node(UnlexerRule(src=self.char_from_list(range(216, 246))))
        elif choice == 5:
            current += self.create_node(UnlexerRule(src=self.char_from_list(range(248, 767))))
        elif choice == 6:
            current += self.create_node(UnlexerRule(src=self.char_from_list(range(880, 893))))
        elif choice == 7:
            current += self.create_node(UnlexerRule(src=self.char_from_list(range(895, 8191))))
        elif choice == 8:
            current += self.create_node(UnlexerRule(src=self.char_from_list(range(8204, 8205))))
        elif choice == 9:
            current += self.create_node(UnlexerRule(src=self.char_from_list(range(8304, 8591))))
        elif choice == 10:
            current += self.create_node(UnlexerRule(src=self.char_from_list(range(11264, 12271))))
        elif choice == 11:
            current += self.create_node(UnlexerRule(src=self.char_from_list(range(12289, 55295))))
        elif choice == 12:
            current += self.create_node(UnlexerRule(src=self.char_from_list(range(63744, 64975))))
        elif choice == 13:
            current += self.create_node(UnlexerRule(src=self.char_from_list(range(65008, 65533))))
        return current
    NCNameStartChar.min_depth = 0

    @depthcontrol
    def NCNameChar(self):
        current = self.create_node(UnlexerRule(name='NCNameChar'))
        choice = self.choice([0 if [1, 0, 0, 0, 0, 0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_100', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_100', choice)] = self.unlexer.weights.get(('alt_100', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.unlexer.NCNameStartChar()
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='-'))
        elif choice == 2:
            current += self.create_node(UnlexerRule(src='.'))
        elif choice == 3:
            current += self.create_node(UnlexerRule(src=self.char_from_list(range(48, 58))))
        elif choice == 4:
            current += self.create_node(UnlexerRule(src='\u00B7'))
        elif choice == 5:
            current += self.create_node(UnlexerRule(src=self.char_from_list(range(768, 879))))
        elif choice == 6:
            current += self.create_node(UnlexerRule(src=self.char_from_list(range(8255, 8256))))
        return current
    NCNameChar.min_depth = 0

